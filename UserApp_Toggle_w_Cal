// Entry point for Terminator Arm UserApplication 
// By: 
// Howard University Terminator Arm Senior Design 2015/2016.
// 

// Dependencies:
// 1. MyoConnect
// 2. Myo_Fann.h

// Description:
// This is used in a larger system. This module provides EMG data streaming and gesture recognition based on 7 pre-defined gesture states
// EMG streaming is only supported for one Myo at a time
// Terminator Myo MAC address: db-fa-0c-69-14-78 (Can be used alternatively instead of MyoConnect to attach our Myo to a Hub)
// http://diagnostics.myo.com/ provides diagnostic data of Myo (connected in MyoConnect) on a pc 
// NB: Replacing system("cls") is recommended and advised.


// #define _USE_MATH_DEFINES
#include <cmath>
#include <iomanip>
#include <algorithm>
#include <array>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include <string>
#include <fstream>
#include "windows.h"   // contains Sleep library
#include <time.h>
#include <process.h>
#include <cstdio>


#include <myo/myo.hpp>            // Myo default header library
#include "Myo_Fann.h"             // "Myo-adapted" Fann library


// DataCollector class inheriting member functions from myo::DeviceListener
class DataCollector : public myo::DeviceListener {
public:
	DataCollector() : onArm(true), emgSamples()
	{}

	void onArmSync(myo::Myo* myo, uint64_t timestamp, myo::Arm arm, myo::XDirection xDirection, float rotation, myo::WarmupState warmupState)
	{
	system("cls"); //std::cout << "ARM SYNC!!" << std::endl;
	onArm = true;
	whichArm = arm;
	}
	// onArmUnsync() is called whenever HUTerminator Myo has detected that it was moved from a stable position on a person's arm after
	// it recognized the arm. Typically this happens when someone takes it off of their arm, but it can also happen
	// when it's moved around on the arm.
	void onArmUnsync(myo::Myo* myo, uint64_t timestamp)
	{
		system("cls"); std::cout << "ARM UN-SYNC!!" << std::endl;
		onArm = false;
		Sleep(5000);
	};

	// onUnpair() is called whenever the Myo is disconnected from Myo Connect by the user
	void onUnpair(myo::Myo* myo, uint64_t timestamp)
	{
		// We've lost our Myo.
		// Zeros are seen in output file if there was a disconnect so test can be repeated
		emgSamples.fill(0);
	}

	// onEmgData() is called whenever a paired Myo has provided new EMG data, and EMG streaming is enabled
	// Classifier output data
	void onEmgData(myo::Myo* myo, uint64_t timestamp, const int8_t* emg)
	{
		for (int i = 0; i < 8; i++) {
			emgSamples[i] = emg[i];
		}
	}

	// The values of this array is set by onEmgData() above
	std::array<int8_t, 8> emgSamples;
	int DataArray[80];
	int no_testDatalines = 10; int no_lines = 0;

	// There are other virtual functions in DeviceListener that we could override here, like onAccelerometerData()
	// For this application, the functions overridden above are sufficient
	std::string update = "*REST/RELAX* position";
	std::fstream Cal_DataFile;
	std::string Cal_filepath = "C:\\Users\\Ayotunde\\Documents\\Visual Studio 2013\\Projects\\fann-master\\fann-master\\examples\\MyoCal.data";
	bool NewLineflag = 0; float gesture_label, lastdataval;
	bool title_flag = 0;

	// We define this function to write the data values from Cal. in calibration format required by the Myo_Fann lib.
	// ** NB ** : This function could use a lot of optimization but it works as is.
	void writeCalData(std::string gesture)      
	{
		if (no_lines != no_testDatalines || update != gesture){       // Check to ensure we're only writing how many data lines we need from the hub
			// Create and open outfile 
			Cal_DataFile.open(Cal_filepath, std::fstream::app);
			if (!title_flag) Cal_DataFile << "12 80 1\n";

			// write out the EMG classifier data
			for (size_t i = 0; i < emgSamples.size(); i++) {
				std::ostringstream oss;
				oss << static_cast<int>(emgSamples[i]);        // convert 8-bit array into int
				std::string emgString = oss.str();

				if (NewLineflag == 1){
					Cal_DataFile << "\n";
					NewLineflag = 0;
				}

				// Write current gesture value to outfile
				if (update != gesture){
					no_lines = 0;   // Reset no. of lines 
					if (update == "*REST/RELAX* position")	   gesture_label = 0;
					else if (update == "*(THUMB)* contraction")   gesture_label = 0.2;
					else if (update == "*(INDEX fing.)* contraction") gesture_label = 0.4;
					else if (update == "*(MIDDLE fing.)* contraction") gesture_label = 0.6;
					else if (update == "*(RING fing.)* contraction")   gesture_label = 0.8;
					else if (update == "*(PINKY fing.)* contraction")  gesture_label = 0.9;
					else if (update == "*(HAND)* contraction") gesture_label = 1.0;
					Cal_DataFile << gesture_label << "\n"; update = gesture;
					if (gesture == "*(HAND)* contraction") lastdataval = 1.0;
				}

				// Write to outfile
				Cal_DataFile << emgString << " ";
			}
			NewLineflag = 1; no_lines++; title_flag = 1;
			if (lastdataval == 1.0 && no_lines == no_testDatalines) Cal_DataFile << "\n" << lastdataval;
			std::cout << std::flush;
			Cal_DataFile.close();       // flush buffer to outfile
		}
	}

	// We define this function to write the current values that were updated by the on...() functions above
	void writeRunData()
	{
		int j = 0;    // Reset Array starting write-index

		while (j < no_testDatalines*emgSamples.size()){
			// write out the EMG classifier data
			for (size_t i = 0; i < emgSamples.size(); i++) {
				std::ostringstream oss;
				oss << static_cast<int>(emgSamples[i]);        // convert 8-bit array into int
				std::string emgString = oss.str();
				DataArray[j] = static_cast<int>(emgSamples[i]); j++;
			}
		}
	}

	void DeleteCalFile()
	{
		//system("del C:\\Users\\Ayotunde\\Documents\\Visual Studio 2013\\Projects\\fann-master\\fann-master\\examples\\MyoCal.data");
		std::remove("C:\\Users\\Ayotunde\\Documents\\Visual Studio 2013\\Projects\\fann-master\\fann-master\\examples\\MyoCal.data"); 
	}
	// These values are set by onArmSync() and onArmUnsync() above.
	bool onArm;
	myo::Arm whichArm;
};

class GestureRec : public Myo_Fann::TerminatorMyo_Fann{
public:
	DataCollector Data;
	// Open and read datafile 
	std::ifstream datafile;
	fann_type input[80];
	std::string prev_gesture, gesture;

	void TranslateGesture(int Data[80])
	{
		// Grab test data from infile
		for (int i = 0; i < 80; i++)
			input[i] = Data[i];

		// Call Myo_Fann recognition
		fann_type gesture_Val = Myo_Test(input);

		// Translate Myo_FANN gesture recognition efforts
		system("cls");
		std::cout << gesture_Val;
		if (gesture_Val <= 0.5) gesture = "Re";
		if (gesture_Val > 0.8 && gesture_Val < 1.5) gesture = "T"; 
		if (gesture_Val > 1.5 && gesture_Val < 2.5)	gesture = "I"; 
		if (gesture_Val > 2.5 && gesture_Val < 3.5)	gesture = "M"; 
		if (gesture_Val > 3.5 && gesture_Val < 4.5)	gesture = "R"; 
		if (gesture_Val > 4.5 && gesture_Val < 5.5)	gesture = "P"; 
		if (gesture_Val >= 5.5)	gesture = "H";
		
		if (gesture != prev_gesture){
			if (gesture == "Re") std::cout << "\n\n\t\t ** Rest state! **\n";
			if (gesture == "T") std::cout << "\n\n\t\t ** Thumb Finger! **\n";
			if (gesture == "I") std::cout << "\n\n\t\t ** Index Finger! **\n";
			if (gesture == "M")std::cout << "\n\n\t\t ** Middle Finger! **\n";
			if (gesture == "R")std::cout << "\n\n\t\t ** Ring Finger! **\n";
			if (gesture == "P")std::cout << "\n\n\t\t ** Pinky Finger! **\n";
			if (gesture == "H") std::cout << "\n\n\t\t ** Hand Gesture! **\n";
		 }
		prev_gesture = gesture;
		Sleep(2000);
	}
};

int main(int argc, char** argv)
{
	// Define Calibration mode test-gestures
	std::string gestures[12] = { "*REST/RELAX* position", "*(THUMB)* contraction", "*REST/RELAX* position", "*(INDEX fing.)* contraction", "*REST/RELAX* position",
		"*(MIDDLE fing.)* contraction", "*REST/RELAX* position", "*(RING fing.)* contraction", "*REST/RELAX* position",
		"*(PINKY fing.)* contraction", "*REST/RELAX* position", "*(HAND)* contraction" };

	// We catch any exceptions that might occur below -- see the catch statement for more details
	try {
		system("mode 650");   // Full screen mode
		// First, we create a Hub without any application identifier (I deemed it unnecessary), the Hub provides access to one or more Myos
		myo::Hub hub("");

		std::cout << "\t\t Attempting to find HU Terminator Myo..." << std::endl;

		// Next, we attempt to find our Myo. If it's already paired in Myo Connect, this will return our Myo immediately
		// waitForMyo() takes a timeout value in milliseconds
		myo::Myo* myo = hub.waitForMyo(0);               // Times-out until Myo is found! 

		hub.setLockingPolicy(hub.lockingPolicyNone);      // Keep Terminator Myo unlocked

		// If waitForMyo() returned a null pointer, we failed to find our Myo, so exit with an error message
		if (!myo) {
			throw std::runtime_error("Unable to find HU Terminator Myo! \n Please Check MyoConnect!");
		}

		// We've found our Myo!
		std::cout << "\t\t  Now connected to HU Terminator Myo! " << std::endl << std::endl;

		// Next we enable EMG streaming on the found Myo
		myo->setStreamEmg(myo::Myo::streamEmgEnabled);
		myo->unlockHold;

		// Next we construct an instance of our DeviceListener, so that we can register it with the Hub
		DataCollector collector;
		GestureRec TerminatorGR; // Instance of Terminator Myo_FANN

		// Hub::addListener() takes the address of any object whose class inherits from DeviceListener, and will cause
		// Hub::run() to send events to all registered device listeners
		hub.addListener(&collector);

		// Set console font parameters (change some default cmd properties)
		CONSOLE_FONT_INFOEX cfi;
		cfi.cbSize = sizeof cfi;
		cfi.nFont = 0;
		cfi.dwFontSize.X = 0;
		cfi.dwFontSize.Y = 16;
		cfi.FontFamily = FF_DONTCARE;
		cfi.FontWeight = FW_NORMAL;
		wcscpy_s(cfi.FaceName, L"Consolas");
		SetCurrentConsoleFontEx(GetStdHandle(STD_OUTPUT_HANDLE), FALSE, &cfi);

		std::cout << "\n\n\n\n\n\n\t\t    Welcome to Terminator Arm Gen. (1.0) !" << std::endl;
		std::cout << "\t  Allow a couple seconds while Terminator Myo warms up to arm... " << std::endl << std::endl;
		Sleep(5000);             // suspend execution of current/active thread for time-argument

		// If Calibration mode is enabled, Train Cal. Network
		if (TerminatorGR.toCalibrate){ 
			system("cls");
			std::cout << "\n\n\n\n\n\n\t   Please follow the instructions to perform CALIBRATION!" << std::endl;
			Sleep(5000);             // suspend execution of current/active thread for time-argument
			
			// Perform Calibration
			for (int i = 0; i < sizeof(gestures) / sizeof(*gestures); i++){
				system("cls");
				std::cout << std::endl; std::cout << "\n\n\n \t\t Perform:  " << gestures[i] << " for (5) secs" << std::endl;

				// Get current CPU time
				double startTime = GetTickCount();
				double currentTime = 0;

				while ((GetTickCount() - startTime) <= 1000) {}; // wait for 1 extra sec for user change
				// Record data for 3 seconds
				while (currentTime <= 3000)
				{
					// In each iteration of our main loop, we run the Myo event loop for a set number of milliseconds
					// In this case, we wish to update our display 50 times a second. (Myo provides EMG at 200Hz and IMU data at 50Hz and is unaffected by display rates)
					hub.run(1000/20); //hub.runOnce();
					
					// After processing events, we call the writeData() function to write new data to our outfile
					collector.writeCalData(gestures[i]);
					
					// Update time for iteration purposes
					currentTime = GetTickCount() - startTime;
				}
				while ((GetTickCount() - startTime) <= 5000) {}; // wait for 1 extra sec for user change
			}

			// Train net with logged data
			system("cls"); std::cout << "\t\t\t   Data logging complete!\n"; std::cout << "\t\tNow calibrating logged user data...\n\n\n\n\n\n\n"; Sleep(1000);
			TerminatorGR.Myo_Train();
			system("cls"); std::cout << "\n\n\n\n\n\n\t\t  User Calibration complete! \n\n"; Sleep(1000);
			collector.DeleteCalFile();  // Net. is trained, deletes Cal_Datafile for next user

			// Exit calibration, Ready for real-time data
		}
			
		
		// Finally we enter our Real-time loop.
		Listen:
		while (collector.onArm){
		
			// Get current CPU time
			double startTime = GetTickCount();
			double currentTime = 0;

			//if (collector.)

			// Get data for 3 seconds
			while (currentTime <= 3000)
			{
				// In each iteration of our main loop, we run the Myo event loop for a set number of milliseconds
				// In this case, we wish to update our display 50 times a second. (Myo provides EMG at 200Hz and IMU data at 50Hz and is unaffected by display rates)
				hub.run(1000 / 20);

				// After processing events, we call the writeData() function to write new data to our outfile
				collector.writeRunData();

				TerminatorGR.TranslateGesture(collector.DataArray);

				// Update time for iteration purposes
				currentTime = GetTickCount() - startTime;
				if (collector.onArm) std::cout << "Still on Arm!! \n";
			}

	//	}
	}
		
		while (collector.onArm == false){
			system("cls");  std::cout << "\n\n\n \t\tPlease re-sync Terminator Myo for best results!";
		}
		goto Listen;

		// Tidy up & End program
		system("cls");
		std::cout << "\n       *****  Thank you for from HU Team Terminator!  *****\n\n";
		Sleep(3000);
		return 0;

	}
	catch (const std::exception& e) {
		std::cerr << "Error: " << e.what() << std::endl;
		std::cerr << "Press enter to continue.";
		std::cin.ignore();
		return 1;
	}
}
